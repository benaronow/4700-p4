#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

class Receiver:
    """
    Handles receiving messages on a UDP socket server from a remote host.

    It binds to a port, listens for incoming messages, and processes them by logging, sending acknowledgments, 
    and printing received data.
    
    Handles errors, ensures communication with the correct remote host, 
    and detects dropped messages.

    """
    def __init__(self):
        """
        Initialize host, port, and other default variables for messaging system.
        """
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)

        self.remote_host = None
        self.remote_port = None
        
        self.done = False
        self.received = []

    def send(self, message):
        """
        Send given message to remote address.
        """
        self.log("Sent message %s" % json.dumps(message))
        self.socket.sendto(json.dumps(message).encode("utf-8"), (self.remote_host, self.remote_port))

    def recv(self, socket):
        """
        Receives from the given socket and return the received json message or None if invalid.
        """
        socket.settimeout(1)
        try:
            data, addr = socket.recvfrom(65535)
        except:
            return None

        # Grab the remote host/port if we don't already have it
        if self.remote_host is None:
            self.remote_host = addr[0]
            self.remote_port = addr[1]

        # Make sure we're talking to the same remote host
        if addr != (self.remote_host, self.remote_port):
            self.log("Error:  Received response from unexpected remote; ignoring")
            return None
        else:
            self.log("Received message %s" % data.decode("utf-8"))
            return json.loads(data.decode("utf-8"))

    def log(self, message):
        """
        Logs the given message with a new line in stderr.
        """
        sys.stderr.write(message + "\n")
        sys.stderr.flush()
        
    def print_data(self):
        """
        Print data from receied messages to stdout.
        """
        self.received.sort(key=lambda msg: msg['seq'])
        for msg in self.received:
            # Print out the data to stdout
            print(msg["data"], end='', flush=True)
        self.done = True

    def run(self):
        """
        Runs the Receiver in UDP-style messaging system.
       
        - Continuously listens, with select, for incoming messages on the UDP socket.
        - When a message is received, it processes the message by checking 
          if it is a 'done' signal or a regular message
            - If it is a 'done' 
                it prints out the received data and sends a confirmation. 
            - else
                it appends them to the received list if not duplicates
                and sends an acknowledgment back to the sender.
     
        - Detects dropped messages
        """
        
        while True:
            socks = select.select([self.socket], [], [])[0]
            for conn in socks:
                recv_start = time.time()
                msg = self.recv(conn)

                if msg:
                    if (msg == 'done'):
                        if not self.done:
                            self.print_data() 
                        self.send('done')
                    else:
                        if (msg not in self.received):
                            self.received.append(msg)
                        
                        # Always send back an ack
                        self.send({ "type": "ack", "seq": msg["seq"] })
                else:
                    if time.time() - recv_start >= 1:
                        print('DROP DETECTED')
                        break

        return

if __name__ == "__main__":
    """
    Gathers host and port arguments. Then, creates and runs the Receiver.
    """
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    sender = Receiver()
    sender.run()
