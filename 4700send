#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

DATA_SIZE = 1375

class Sender:
    def __init__(self, host, port):
        self.host = host
        self.port = int(port)
        self.log("Sender starting up using port %s" % self.port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.waiting = False

        self.remote_host = None
        self.remote_port = None
        
        self.latency = 1
        self.window_size = 4
        self.rt_start = 0
        self.done = False
        self.inFlight = []
        self.totalSent = 0
        self.received = []
        self.more = True

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send(self, message):
        self.log("Sending message '%s'" % json.dumps(message))
        self.socket.sendto(json.dumps(message).encode("utf-8"), (self.host, self.port))
        self.rt_start = time.time()

    def recv(self, socket):
        socket.settimeout(self.latency)
        try:
            data, addr = socket.recvfrom(65535)
        except:
            return None

        # Grab the remote host/port if we don't already have it
        if self.remote_host is None:
            self.remote_host = addr[0]
            self.remote_port = addr[1]

        # Make sure we're talking to the same remote host
        if addr != (self.remote_host, self.remote_port):
            self.log("Error:  Received response from unexpected remote; ignoring")
            return None
        else:
            self.log("Received message %s" % data)
            return json.loads(data.decode("utf-8"))
        
    def send_input(self):
        for msg in self.inFlight:
            self.send(msg)
        while len(self.inFlight) < self.window_size:
            data = sys.stdin.read(DATA_SIZE)
            if len(data) == 0:
                self.more = False
                self.waiting = True
                break
            else:
                msg = { "type": "msg", "data": data, "seq": self.totalSent }
                self.send(msg)
                self.inFlight.append(msg)
                self.totalSent += 1
        self.waiting = True
            
    def recv_ack(self):
        thresh = 0
        while len(self.inFlight) > 0:
            data = self.recv(self.socket)
            if self.latency >= 1: self.latency = (time.time() - self.rt_start)
            if data:
                if (data == 'done'):
                    self.done = True
                    self.inFlight.remove('done')
                elif (data not in self.received):
                    self.received.append(data)
                    for msg in self.inFlight:
                        if msg['seq'] == data['seq']: self.inFlight.remove(msg)
                    thresh += 1
            else:
                break
        if thresh == self.window_size:
            self.window_size = max(self.window_size * 2, 1)
        else:
            self.window_size = max(self.window_size - 1, 1)
        self.waiting = False

    def run(self):
        while True:
            sockets = [self.socket, sys.stdin] if not self.waiting else [self.socket]
            
            socks = select.select(sockets, [], [], 0.1)[0]
            
            for conn in socks:
                # Receives any acknowledgments that have been sent
                if conn == self.socket:
                    self.recv_ack()
                    
                # Sends a portion of the remaining input based on the window size
                elif (conn == sys.stdin):
                    self.send_input()
                    
            if (time.time() - self.rt_start >= self.latency):
                self.send_input()
            
            # Exits if no packets are currently in flight and no data is left to send
            if (len(self.inFlight) == 0) & (not self.more):
                if (self.done):
                    self.log("All done!")
                    sys.exit(0)
                else:
                    self.send('done')
                    self.inFlight.append('done')
                    self.waiting = True

        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()
